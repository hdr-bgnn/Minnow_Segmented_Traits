import pandas as pd

configfile: "config/config.yaml"
    # names come from the config file

def get_image_names(csv_filename):
    # Read CSV returning dictionary of 'name' -> 'download_url'
    df = pd.read_csv(csv_filename)
    # Create 'name' column by removing the filename extension from 'original_file_name'
    names = df['original_file_name'].apply(lambda x : os.path.splitext(x)[0])
    return names.tolist()

def morphology_presence_files(wildcards):
    # Returns output morphology presence filenames
    with checkpoints.select_minnow_images.get(**wildcards).output[1].open() as f:
       names = get_image_names(f)
    # only process 10 files for testing purposes
    names = names[:10]
    presence_files = [f"segmentation/Morphology/Presence/{i}_presence.json" for i in names]
    return {
        "presence_files": presence_files
    }

rule all:
    input:
        unpack(morphology_presence_files)

checkpoint select_minnow_images:
    input:
        config["Image_Metadata"],
        config["Image_Quality_Metadata"],
        config["Burress"]
    output:
        config["Minnow_Filtered"],
        config["Burress_Minnow_Filtered"],
        config["Sampling"]
    params:
        script=srcdir("../Scripts/Minnow_Selection_Image_Quality_Metadata.R")
    shell:
        "R_LIBS_USER=Library Rscript {params.script}"

# import BGNN_Snakemake rules used to create morpology presence.json files for images
module segmentation:
    snakefile:
        github("hdr-bgnn/BGNN_Snakemake", path="workflow/Snakefile", tag="84e3604a6f767c43b31259237ab1ffc61bac3be8")
    # Use output from Minnow_Selection_Image_Quality_Metadata.R as input files
    config: { "list": config["Minnow_Filtered"] }
    # Store all files in a subdirectory
    prefix: "segmentation"
use rule * from segmentation as seg_*
