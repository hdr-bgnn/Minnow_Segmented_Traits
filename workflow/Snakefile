import os
import pandas as pd

configfile: "config/config.yaml"
    # names come from the config file

rule all:
    input:
        presence_absence_matrix=config["Presence_Absence_Matrix"],
        sampling_species_burress=config["Sampling_Species_Burress"],
        sampling_minnows_seg=config["Sampling_Minnows_Seg"],
        sampling_df_seg=config["Sampling_DF_Seg"],
        presence_absence_dist_image=config["Presence_Absence_Dist_Image"],
        heatmap_avg_blob_image=config["Heatmap_Avg_Blob_Image"],
        heatmap_sd_blob_image=config["Heatmap_SD_Blob_Image"]

rule download_fish_air_data:
    output:
        config["File_Metadata"],
        config["Image_Metadata"],
        config["Image_Quality_Metadata"]
    params:
        apikey=config["Fish_AIR_API_Key"],
        script=srcdir("../Scripts/download-fish-air.sh")
    shell: 'bash {params.script} {params.apikey}'

rule dependencies:
    input: "dependencies.R"
    output: directory("Library")
    shell: 'mkdir Library && R_LIBS_USER=Library Rscript dependencies.R'

checkpoint select_minnow_images:
    input:
        config["Image_Metadata"],
        config["Image_Quality_Metadata"],
        config["Burress"],
        "Library"

    output:
        config["Burress_Minnow_Filtered"],
        config["Sampling"]
    params:
        script=srcdir("../Scripts/Minnow_Selection_Image_Quality_Metadata.R")
    shell:
        "R_LIBS_USER=Library Rscript {params.script}"

# import BGNN_Snakemake rules used to create morpology presence.json files for images
module segmentation:
    snakefile:
        github("hdr-bgnn/BGNN_Core_Workflow", path="workflow/Snakefile", tag="1.0.1")
    # Use output from Minnow_Selection_Image_Quality_Metadata.R as input files
    config: { "list": config["Burress_Minnow_Filtered"] }
    # Store all files in a subdirectory
    prefix: "segmentation"

def get_image_url(wildcards):
    """
    Read the filtered CSV to lookup a URL(accessURI) for a file via the image wildcard(ARKID)
    These column names do not need to be crosswalked with meta.xml because we are using the 
    filtered CSV file that has already performed that step.
    """
    filename = checkpoints.select_minnow_images.get().output[0]
    df = pd.read_csv(filename)
    # The segmentation workflow names images 'Images/{image}.jpg' so for us `image` is an ARKID
    row = df[df["ARKID"] == wildcards.image]
    url = row["accessURI"].item()
    return url

use rule download_image from segmentation as seg_download_image with:
   input: config["Burress_Minnow_Filtered"]
   container: 'docker://quay.io/biocontainers/gnu-wget:1.18--h60da905_7'
   params: download_link=get_image_url

use rule generate_metadata from segmentation as seg_generate_metadata
use rule transform_metadata from segmentation as seg_transform_metadata
use rule crop_image from segmentation as seg_crop_image
use rule segment_image from segmentation as seg_segment_image

rule create_morphological_analysis:
    input:
        image = 'segmentation/Segmented/{image}_segmented.png',
        metadata = 'segmentation/Metadata/{image}.json'
    output: 'Morphology/Presence/{image}_presence.json'
    log: 'logs/create_morphological_analysis_{image}.log'
    container:
        "docker://ghcr.io/hdr-bgnn/morphology-analysis/morphology:1.0.0"
    shell:
        'Morphology_main.py {input.image} --metadata {input.metadata} {output} > {log} 2>&1'

def get_arkid_list(csv_filename):
    """
    Read the filtered CSV to lookup a list of ARKIDs.
    These column names do not need to be crosswalked with meta.xml because we are using the 
    filtered CSV file that has already performed that step.
    """
    df = pd.read_csv(csv_filename)
    names = df['ARKID']
    return names.tolist()

def presence_absence_files(wildcards):
    # Returns output morphology presence filenames based on Burress_Minnow_Filtered
    with checkpoints.select_minnow_images.get(**wildcards).output[0].open() as f:
       arkids = get_arkid_list(f)
    return [f"Morphology/Presence/{i}_presence.json" for i in arkids]

rule presence_absence_analysis:
    input:
       presence_files=presence_absence_files,
       sampling=config["Sampling"],
       image_metadata=config["Image_Metadata"],
       image_quality_metadata=config["Image_Quality_Metadata"],
       burress=config["Burress"],
       library="Library"
    output:
       presence_absence_matrix=config["Presence_Absence_Matrix"],
       sampling_species_burress=config["Sampling_Species_Burress"],
       sampling_minnows_seg=config["Sampling_Minnows_Seg"],
       sampling_df_seg=config["Sampling_DF_Seg"],
       presence_absence_dist_image=config["Presence_Absence_Dist_Image"],
       heatmap_avg_blob_image=config["Heatmap_Avg_Blob_Image"],
       heatmap_sd_blob_image=config["Heatmap_SD_Blob_Image"]
    params:
        script=srcdir("../Scripts/Presence_Absence_Analysis.R"),
    shell:
        "R_LIBS_USER=Library Rscript {params.script}"
